{"ast":null,"code":"// Minimax algorithm for unbeatable AI\nexport const checkWinner = squares => {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8],\n  // rows\n  [0, 3, 6], [1, 4, 7], [2, 5, 8],\n  // columns\n  [0, 4, 8], [2, 4, 6] // diagonals\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n};\nexport const isBoardFull = squares => {\n  return squares.every(square => square !== null);\n};\nexport const getAvailableMoves = squares => {\n  return squares.map((square, index) => square === null ? index : null).filter(index => index !== null);\n};\nexport const minimax = (squares, depth, isMaximizing, alpha = -Infinity, beta = Infinity) => {\n  const winner = checkWinner(squares);\n  if (winner === 'O') return 10 - depth; // AI wins\n  if (winner === 'X') return depth - 10; // Human wins\n  if (isBoardFull(squares)) return 0; // Draw\n\n  const availableMoves = getAvailableMoves(squares);\n  if (isMaximizing) {\n    let bestScore = -Infinity;\n    for (let move of availableMoves) {\n      const newSquares = [...squares];\n      newSquares[move] = 'O';\n      const score = minimax(newSquares, depth + 1, false, alpha, beta);\n      bestScore = Math.max(bestScore, score);\n      alpha = Math.max(alpha, score);\n      if (beta <= alpha) break; // Alpha-beta pruning\n    }\n    return bestScore;\n  } else {\n    let bestScore = Infinity;\n    for (let move of availableMoves) {\n      const newSquares = [...squares];\n      newSquares[move] = 'X';\n      const score = minimax(newSquares, depth + 1, true, alpha, beta);\n      bestScore = Math.min(bestScore, score);\n      beta = Math.min(beta, score);\n      if (beta <= alpha) break; // Alpha-beta pruning\n    }\n    return bestScore;\n  }\n};\nexport const getBestMove = squares => {\n  const availableMoves = getAvailableMoves(squares);\n  let bestScore = -Infinity;\n  let bestMove = null;\n  for (let move of availableMoves) {\n    const newSquares = [...squares];\n    newSquares[move] = 'O';\n    const score = minimax(newSquares, 0, false);\n    if (score > bestScore) {\n      bestScore = score;\n      bestMove = move;\n    }\n  }\n  return bestMove;\n};","map":{"version":3,"names":["checkWinner","squares","lines","i","length","a","b","c","isBoardFull","every","square","getAvailableMoves","map","index","filter","minimax","depth","isMaximizing","alpha","Infinity","beta","winner","availableMoves","bestScore","move","newSquares","score","Math","max","min","getBestMove","bestMove"],"sources":["C:/bot/tic-tac-toe/tic-tac-toe/render-deployment/frontend/src/utils/minimax.js"],"sourcesContent":["// Minimax algorithm for unbeatable AI\r\nexport const checkWinner = (squares) => {\r\n  const lines = [\r\n    [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows\r\n    [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns\r\n    [0, 4, 8], [2, 4, 6] // diagonals\r\n  ];\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const isBoardFull = (squares) => {\r\n  return squares.every(square => square !== null);\r\n};\r\n\r\nexport const getAvailableMoves = (squares) => {\r\n  return squares\r\n    .map((square, index) => square === null ? index : null)\r\n    .filter(index => index !== null);\r\n};\r\n\r\nexport const minimax = (squares, depth, isMaximizing, alpha = -Infinity, beta = Infinity) => {\r\n  const winner = checkWinner(squares);\r\n  \r\n  if (winner === 'O') return 10 - depth; // AI wins\r\n  if (winner === 'X') return depth - 10; // Human wins\r\n  if (isBoardFull(squares)) return 0; // Draw\r\n  \r\n  const availableMoves = getAvailableMoves(squares);\r\n  \r\n  if (isMaximizing) {\r\n    let bestScore = -Infinity;\r\n    for (let move of availableMoves) {\r\n      const newSquares = [...squares];\r\n      newSquares[move] = 'O';\r\n      const score = minimax(newSquares, depth + 1, false, alpha, beta);\r\n      bestScore = Math.max(bestScore, score);\r\n      alpha = Math.max(alpha, score);\r\n      if (beta <= alpha) break; // Alpha-beta pruning\r\n    }\r\n    return bestScore;\r\n  } else {\r\n    let bestScore = Infinity;\r\n    for (let move of availableMoves) {\r\n      const newSquares = [...squares];\r\n      newSquares[move] = 'X';\r\n      const score = minimax(newSquares, depth + 1, true, alpha, beta);\r\n      bestScore = Math.min(bestScore, score);\r\n      beta = Math.min(beta, score);\r\n      if (beta <= alpha) break; // Alpha-beta pruning\r\n    }\r\n    return bestScore;\r\n  }\r\n};\r\n\r\nexport const getBestMove = (squares) => {\r\n  const availableMoves = getAvailableMoves(squares);\r\n  let bestScore = -Infinity;\r\n  let bestMove = null;\r\n  \r\n  for (let move of availableMoves) {\r\n    const newSquares = [...squares];\r\n    newSquares[move] = 'O';\r\n    const score = minimax(newSquares, 0, false);\r\n    \r\n    if (score > bestScore) {\r\n      bestScore = score;\r\n      bestMove = move;\r\n    }\r\n  }\r\n  \r\n  return bestMove;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}