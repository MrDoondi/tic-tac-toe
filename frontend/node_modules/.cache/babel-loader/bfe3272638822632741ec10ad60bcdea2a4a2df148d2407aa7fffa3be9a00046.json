{"ast":null,"code":"var _jsxFileName = \"C:\\\\bot\\\\tic-tac-toe\\\\tic-tac-toe\\\\render-deployment\\\\frontend\\\\src\\\\components\\\\Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Board from './Board.jsx';\nimport GameModeSelector from './GameModeSelector.jsx';\nimport MLTrainer from './MLTrainer.jsx';\nimport { checkWinner, isBoardFull, getBestMove } from '../utils/minimax.js';\nimport MLAI from '../utils/mlAI.js';\nimport './Game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const navigate = useNavigate();\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [xIsNext, setXIsNext] = useState(true);\n  const [gameMode, setGameMode] = useState('human-vs-human');\n  const [gameStarted, setGameStarted] = useState(false);\n  const [autoPlaySpeed, setAutoPlaySpeed] = useState(1000);\n  const [showMLTrainer, setShowMLTrainer] = useState(false);\n  const [mlAI, setMlAI] = useState(null);\n  const winner = checkWinner(squares);\n  const isDraw = !winner && isBoardFull(squares);\n  const gameOver = winner || isDraw;\n  const getWinningLine = () => {\n    const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8],\n    // rows\n    [0, 3, 6], [1, 4, 7], [2, 5, 8],\n    // columns\n    [0, 4, 8], [2, 4, 6] // diagonals\n    ];\n    for (let line of lines) {\n      const [a, b, c] = line;\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return line;\n      }\n    }\n    return null;\n  };\n  const handleSquareClick = i => {\n    if (squares[i] || gameOver) return;\n    if (gameMode === 'human-vs-human' || gameMode === 'human-vs-bot' && xIsNext) {\n      const newSquares = squares.slice();\n      newSquares[i] = xIsNext ? 'X' : 'O';\n      setSquares(newSquares);\n      setXIsNext(!xIsNext);\n    }\n  };\n  const makeBotMove = () => {\n    if (gameOver) return;\n    let move = null;\n\n    // Use ML AI if available and trained, otherwise use minimax\n    if (mlAI && mlAI.getStats().gamesPlayed > 0) {\n      move = mlAI.makeMove(squares, 'O');\n    } else {\n      move = getBestMove(squares);\n    }\n    if (move !== null) {\n      const newSquares = squares.slice();\n      newSquares[move] = 'O';\n      setSquares(newSquares);\n      setXIsNext(true);\n    }\n  };\n  const makeRandomMove = () => {\n    if (gameOver) return;\n    const availableMoves = squares.map((square, index) => square === null ? index : null).filter(index => index !== null);\n    if (availableMoves.length > 0) {\n      const randomMove = availableMoves[Math.floor(Math.random() * availableMoves.length)];\n      const newSquares = squares.slice();\n      newSquares[randomMove] = xIsNext ? 'X' : 'O';\n      setSquares(newSquares);\n      setXIsNext(!xIsNext);\n    }\n  };\n\n  // Bot vs Bot auto-play\n  useEffect(() => {\n    if (gameMode === 'bot-vs-bot' && gameStarted && !gameOver) {\n      const timer = setTimeout(() => {\n        if (xIsNext) {\n          // X plays randomly or with ML AI if available\n          if (mlAI && mlAI.getStats().gamesPlayed > 0) {\n            const move = mlAI.makeMove(squares, 'X');\n            if (move !== null) {\n              const newSquares = squares.slice();\n              newSquares[move] = 'X';\n              setSquares(newSquares);\n              setXIsNext(false);\n            }\n          } else {\n            makeRandomMove(); // X plays randomly\n          }\n        } else {\n          makeBotMove(); // O plays optimally\n        }\n      }, autoPlaySpeed);\n      return () => clearTimeout(timer);\n    }\n  }, [squares, xIsNext, gameMode, gameStarted, gameOver, autoPlaySpeed, mlAI]);\n\n  // Human vs Bot\n  useEffect(() => {\n    if (gameMode === 'human-vs-bot' && !xIsNext && !gameOver && gameStarted) {\n      const timer = setTimeout(() => {\n        makeBotMove();\n      }, 500);\n      return () => clearTimeout(timer);\n    }\n  }, [squares, xIsNext, gameMode, gameOver, gameStarted]);\n  const handleModeSelect = mode => {\n    if (mode === 'multiplayer') {\n      navigate('/multiplayer');\n    } else {\n      setGameMode(mode);\n      setGameStarted(false);\n      resetGame();\n    }\n  };\n  const startGame = () => {\n    setGameStarted(true);\n  };\n  const resetGame = () => {\n    setSquares(Array(9).fill(null));\n    setXIsNext(true);\n    setGameStarted(false);\n  };\n  const getStatus = () => {\n    if (winner) {\n      return `Winner: ${winner}`;\n    } else if (isDraw) {\n      return 'Game is a draw!';\n    } else {\n      return `Next player: ${xIsNext ? 'X' : 'O'}`;\n    }\n  };\n  const getCurrentPlayer = () => {\n    if (gameMode === 'human-vs-bot') {\n      return xIsNext ? 'You (X)' : 'Bot (O)';\n    } else if (gameMode === 'bot-vs-bot') {\n      return xIsNext ? 'Bot X' : 'Bot O';\n    } else {\n      return xIsNext ? 'Player X' : 'Player O';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDFAE Tic-Tac-Toe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"subtitle\",\n        children: \"Unbeatable AI Edition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), !gameStarted ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-setup\",\n      children: [/*#__PURE__*/_jsxDEV(GameModeSelector, {\n        selectedMode: gameMode,\n        onModeSelect: handleModeSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this), gameMode === 'bot-vs-bot' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"speed-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Auto-play Speed:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: autoPlaySpeed,\n          onChange: e => setAutoPlaySpeed(Number(e.target.value)),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: 2000,\n            children: \"Slow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 1000,\n            children: \"Normal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 500,\n            children: \"Fast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 200,\n            children: \"Very Fast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start-button\",\n        onClick: startGame,\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-play\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status\",\n          children: getStatus()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"current-player\",\n          children: [\"Current: \", getCurrentPlayer()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        squares: squares,\n        onSquareClick: handleSquareClick,\n        winningLine: getWinningLine()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-button\",\n          onClick: resetGame,\n          children: \"New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"mode-button\",\n          onClick: () => setGameStarted(false),\n          children: \"Change Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }, this), showMLTrainer && /*#__PURE__*/_jsxDEV(MLTrainer, {\n      onClose: () => setShowMLTrainer(false),\n      onModelReady: trainedAI => {\n        setMlAI(trainedAI);\n        setShowMLTrainer(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"XgHAkYfbbBXcDPIqmawQa1eYLDE=\", false, function () {\n  return [useNavigate];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Board","GameModeSelector","MLTrainer","checkWinner","isBoardFull","getBestMove","MLAI","jsxDEV","_jsxDEV","Game","_s","navigate","squares","setSquares","Array","fill","xIsNext","setXIsNext","gameMode","setGameMode","gameStarted","setGameStarted","autoPlaySpeed","setAutoPlaySpeed","showMLTrainer","setShowMLTrainer","mlAI","setMlAI","winner","isDraw","gameOver","getWinningLine","lines","line","a","b","c","handleSquareClick","i","newSquares","slice","makeBotMove","move","getStats","gamesPlayed","makeMove","makeRandomMove","availableMoves","map","square","index","filter","length","randomMove","Math","floor","random","timer","setTimeout","clearTimeout","handleModeSelect","mode","resetGame","startGame","getStatus","getCurrentPlayer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","selectedMode","onModeSelect","value","onChange","e","Number","target","onClick","onSquareClick","winningLine","onClose","onModelReady","trainedAI","_c","$RefreshReg$"],"sources":["C:/bot/tic-tac-toe/tic-tac-toe/render-deployment/frontend/src/components/Game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Board from './Board.jsx';\r\nimport GameModeSelector from './GameModeSelector.jsx';\r\nimport MLTrainer from './MLTrainer.jsx';\r\nimport { checkWinner, isBoardFull, getBestMove } from '../utils/minimax.js';\r\nimport MLAI from '../utils/mlAI.js';\r\nimport './Game.css';\r\n\r\nconst Game = () => {\r\n  const navigate = useNavigate();\r\n  const [squares, setSquares] = useState(Array(9).fill(null));\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [gameMode, setGameMode] = useState('human-vs-human');\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [autoPlaySpeed, setAutoPlaySpeed] = useState(1000);\r\n  const [showMLTrainer, setShowMLTrainer] = useState(false);\r\n  const [mlAI, setMlAI] = useState(null);\r\n\r\n  const winner = checkWinner(squares);\r\n  const isDraw = !winner && isBoardFull(squares);\r\n  const gameOver = winner || isDraw;\r\n\r\n  const getWinningLine = () => {\r\n    const lines = [\r\n      [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows\r\n      [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns\r\n      [0, 4, 8], [2, 4, 6] // diagonals\r\n    ];\r\n\r\n    for (let line of lines) {\r\n      const [a, b, c] = line;\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return line;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const handleSquareClick = (i) => {\r\n    if (squares[i] || gameOver) return;\r\n\r\n    if (gameMode === 'human-vs-human' || \r\n        (gameMode === 'human-vs-bot' && xIsNext)) {\r\n      const newSquares = squares.slice();\r\n      newSquares[i] = xIsNext ? 'X' : 'O';\r\n      setSquares(newSquares);\r\n      setXIsNext(!xIsNext);\r\n    }\r\n  };\r\n\r\n  const makeBotMove = () => {\r\n    if (gameOver) return;\r\n\r\n    let move = null;\r\n    \r\n    // Use ML AI if available and trained, otherwise use minimax\r\n    if (mlAI && mlAI.getStats().gamesPlayed > 0) {\r\n      move = mlAI.makeMove(squares, 'O');\r\n    } else {\r\n      move = getBestMove(squares);\r\n    }\r\n    \r\n    if (move !== null) {\r\n      const newSquares = squares.slice();\r\n      newSquares[move] = 'O';\r\n      setSquares(newSquares);\r\n      setXIsNext(true);\r\n    }\r\n  };\r\n\r\n  const makeRandomMove = () => {\r\n    if (gameOver) return;\r\n\r\n    const availableMoves = squares\r\n      .map((square, index) => square === null ? index : null)\r\n      .filter(index => index !== null);\r\n\r\n    if (availableMoves.length > 0) {\r\n      const randomMove = availableMoves[Math.floor(Math.random() * availableMoves.length)];\r\n      const newSquares = squares.slice();\r\n      newSquares[randomMove] = xIsNext ? 'X' : 'O';\r\n      setSquares(newSquares);\r\n      setXIsNext(!xIsNext);\r\n    }\r\n  };\r\n\r\n  // Bot vs Bot auto-play\r\n  useEffect(() => {\r\n    if (gameMode === 'bot-vs-bot' && gameStarted && !gameOver) {\r\n      const timer = setTimeout(() => {\r\n        if (xIsNext) {\r\n          // X plays randomly or with ML AI if available\r\n          if (mlAI && mlAI.getStats().gamesPlayed > 0) {\r\n            const move = mlAI.makeMove(squares, 'X');\r\n            if (move !== null) {\r\n              const newSquares = squares.slice();\r\n              newSquares[move] = 'X';\r\n              setSquares(newSquares);\r\n              setXIsNext(false);\r\n            }\r\n          } else {\r\n            makeRandomMove(); // X plays randomly\r\n          }\r\n        } else {\r\n          makeBotMove(); // O plays optimally\r\n        }\r\n      }, autoPlaySpeed);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [squares, xIsNext, gameMode, gameStarted, gameOver, autoPlaySpeed, mlAI]);\r\n\r\n  // Human vs Bot\r\n  useEffect(() => {\r\n    if (gameMode === 'human-vs-bot' && !xIsNext && !gameOver && gameStarted) {\r\n      const timer = setTimeout(() => {\r\n        makeBotMove();\r\n      }, 500);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [squares, xIsNext, gameMode, gameOver, gameStarted]);\r\n\r\n  const handleModeSelect = (mode) => {\r\n    if (mode === 'multiplayer') {\r\n      navigate('/multiplayer');\r\n    } else {\r\n      setGameMode(mode);\r\n      setGameStarted(false);\r\n      resetGame();\r\n    }\r\n  };\r\n\r\n  const startGame = () => {\r\n    setGameStarted(true);\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setSquares(Array(9).fill(null));\r\n    setXIsNext(true);\r\n    setGameStarted(false);\r\n  };\r\n\r\n  const getStatus = () => {\r\n    if (winner) {\r\n      return `Winner: ${winner}`;\r\n    } else if (isDraw) {\r\n      return 'Game is a draw!';\r\n    } else {\r\n      return `Next player: ${xIsNext ? 'X' : 'O'}`;\r\n    }\r\n  };\r\n\r\n  const getCurrentPlayer = () => {\r\n    if (gameMode === 'human-vs-bot') {\r\n      return xIsNext ? 'You (X)' : 'Bot (O)';\r\n    } else if (gameMode === 'bot-vs-bot') {\r\n      return xIsNext ? 'Bot X' : 'Bot O';\r\n    } else {\r\n      return xIsNext ? 'Player X' : 'Player O';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-header\">\r\n        <h1>🎮 Tic-Tac-Toe</h1>\r\n        <p className=\"subtitle\">Unbeatable AI Edition</p>\r\n      </div>\r\n\r\n      {!gameStarted ? (\r\n        <div className=\"game-setup\">\r\n          <GameModeSelector \r\n            selectedMode={gameMode} \r\n            onModeSelect={handleModeSelect} \r\n          />\r\n          \r\n          {gameMode === 'bot-vs-bot' && (\r\n            <div className=\"speed-control\">\r\n              <label>Auto-play Speed:</label>\r\n              <select \r\n                value={autoPlaySpeed} \r\n                onChange={(e) => setAutoPlaySpeed(Number(e.target.value))}\r\n              >\r\n                <option value={2000}>Slow</option>\r\n                <option value={1000}>Normal</option>\r\n                <option value={500}>Fast</option>\r\n                <option value={200}>Very Fast</option>\r\n              </select>\r\n            </div>\r\n          )}\r\n          \r\n          <button className=\"start-button\" onClick={startGame}>\r\n            Start Game\r\n          </button>\r\n          \r\n          {/* <button \r\n            className=\"ml-trainer-button\" \r\n            onClick={() => setShowMLTrainer(true)}\r\n          >\r\n            🤖 Train ML AI\r\n          </button> */}\r\n        </div>\r\n      ) : (\r\n        <div className=\"game-play\">\r\n          <div className=\"game-info\">\r\n            <div className=\"status\">{getStatus()}</div>\r\n            <div className=\"current-player\">Current: {getCurrentPlayer()}</div>\r\n          </div>\r\n          \r\n          <Board \r\n            squares={squares} \r\n            onSquareClick={handleSquareClick}\r\n            winningLine={getWinningLine()}\r\n          />\r\n          \r\n          <div className=\"game-controls\">\r\n            <button className=\"reset-button\" onClick={resetGame}>\r\n              New Game\r\n            </button>\r\n            <button className=\"mode-button\" onClick={() => setGameStarted(false)}>\r\n              Change Mode\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {showMLTrainer && (\r\n        <MLTrainer \r\n          onClose={() => setShowMLTrainer(false)}\r\n          onModelReady={(trainedAI) => {\r\n            setMlAI(trainedAI);\r\n            setShowMLTrainer(false);\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}